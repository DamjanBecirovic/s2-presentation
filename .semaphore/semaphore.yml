version: v1.0
name: Python CI/CD Pipeline
agent:
  machine:
    type: f1-standard-2
    os_image: ubuntu2204
auto_cancel:
  queued:
    when: 'true'
fail_fast:
  cancel:
    when: branch != 'main'
blocks:
  - name: Setup Dependencies
    dependencies: []
    task:
      jobs:
        - name: Set up environment and install dependencies
          commands:
            - echo "Setting up Python environment and caching dependencies..."
            - 'export PATH=$HOME/.local/bin:$PATH'
            - checkout
            - mkdir -p .pip_cache
            - cache restore
            - |
              if [ -f requirements.txt ]; then
                pip install --user --cache-dir .pip_cache -r requirements.txt
              else
                echo "No requirements.txt found, skipping installation."
              fi
            - cache store
  - name: Lint and Security Checks
    dependencies:
      - Setup Dependencies
    task:
      jobs:
        - name: Lint code with flake8
          commands:
            - echo "Running flake8 lint..."
            - checkout
            - mkdir -p .pip_cache
            - cache restore
            - 'pip install flake8 || echo "flake8 not installed, skipping lint."'
            - flake8 . || echo "flake8 found issues."
        - name: Security scan with bandit
          commands:
            - echo "Running Bandit security scan..."
            - checkout
            - mkdir -p .pip_cache
            - cache restore
            - 'pip install bandit || echo "bandit not installed, skipping security scan."'
            - bandit -r . -ll || echo "Bandit found security issues."
  - name: Unit Tests
    dependencies:
      - Setup Dependencies
    task:
      jobs:
        - name: Run unit tests
          commands:
            - echo "Running unit tests with pytest..."
            - checkout
            - mkdir -p .pip_cache
            - cache restore
            - 'pip install pytest || echo "pytest not installed, attempting to continue..."'
            - 'pytest --maxfail=1 --disable-warnings -q --junitxml=junit_unit.xml tests || echo "No unit tests found, skipping."'
        - name: Generate coverage report
          commands:
            - echo "Generating coverage report..."
            - checkout
            - mkdir -p .pip_cache
            - cache restore
            - 'pip install coverage || echo "coverage not installed, skipping coverage."'
            - coverage run -m pytest || echo "Coverage run failed or no tests found."
            - coverage xml -o coverage.xml || echo "Failed to generate coverage.xml."
            - artifact push project coverage.xml
  - name: Integration Tests
    dependencies:
      - Unit Tests
    task:
      jobs:
        - name: Run integration tests
          commands:
            - echo "Running integration tests with pytest..."
            - checkout
            - mkdir -p .pip_cache
            - cache restore
            - 'pip install pytest || echo "pytest not installed, attempting to continue..."'
            - 'pytest --maxfail=1 --disable-warnings -q --junitxml=junit_integration.xml tests/integration || echo "No integration tests found, skipping."'
  - name: Docker Build
    dependencies:
      - Integration Tests
    task:
      jobs:
        - name: Build Docker image
          commands:
            - echo "Building Docker image..."
            - checkout
            - |
              if [ -f Dockerfile ]; then
                docker build -t my-python-app:${SEMAPHORE_GIT_BRANCH:-latest} .
              else
                echo "No Dockerfile found, skipping Docker build."
              fi
after_pipeline:
  task:
    jobs:
      - name: Publish test results
        commands:
          - test-results publish junit_unit.xml || echo "No unit test results to publish."
          - test-results publish junit_integration.xml || echo "No integration test results to publish."
